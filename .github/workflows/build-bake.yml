on:
  workflow_call:
    inputs:
      working-directory:
        required: false
        type: string
        default: '.'
      registry-host:
        required: true
        type: string
      suppress-push:
        required: false
        type: boolean
        default: false
      force-push:
        required: false
        type: boolean
        default: false
    secrets:
      registry-user:
        required: true
      registry-password:
        required: true

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'true'
    -
      name: Buildx Parameter Derivation
      id: parameter-derivation
      shell: bash
      run: |
        # build image tag
        TAG=$REF_NAME
        if [[ "$EVENT_NAME" == "pull_request" ]]; then
          TAG=$BASE_REF
        fi
        if [[ "$TAG" == "$DEFAULT_BRANCH" ]]; then
          TAG=latest
        fi

        # determine if we should push the image
        if [[ "$REQUESTED_FORCE_PUSH" == "true" ]] && [[ "$REQUESTED_SUPPRESS_PUSH" == "true" ]]; then
          echo "You cannot force and suppress push at the same time."
          exit 1
        fi
        PUSH=false
        if [[ "$REQUESTED_FORCE_PUSH" == "true" ]]; then
          PUSH=true
        elif [[ "$REQUESTED_SUPPRESS_PUSH" == "true" ]]; then
          PUSH=false
        else
          if [[ "$EVENT_NAME" == "push" ]] || [[ "$EVENT_NAME" == "schedule" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            if [[ "$REF_NAME" == "$DEFAULT_BRANCH" ]] || [[ $REF_TYPE == "tag" ]]; then
              PUSH=true
            fi
          fi
        fi

        # write outputs
        echo "tag=$TAG"
        echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        echo "push=$PUSH"
        echo "push=$PUSH" >> "$GITHUB_OUTPUT"
      env:
        REQUESTED_TAG: ${{ inputs.tag }}
        REQUESTED_SUPPRESS_PUSH: ${{ inputs.suppress-push }}
        REQUESTED_FORCE_PUSH: ${{ inputs.force-push }}
        REGISTRY: ${{ inputs.registry-host }}
        REF_NAME: ${{ github.ref_name }}
        REF_TYPE: ${{ github.ref_type }}
        BASE_REF: ${{ github.event.pull_request.base.ref }}
        EVENT_NAME: ${{ github.event_name }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        IMAGE_NAME: ${{ inputs.image-name }}
    - name: Check If Tests Exist
      id: tests-exist
      uses: andstor/file-existence-action@v3
      with:
        files: '${{ inputs.working-directory }}/tests/requirements.txt'
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    -
      name: Set up Docker Buildx
      id: buildx-setup
      uses: docker/setup-buildx-action@v3
      with:
        use: false
        driver-opts: |
          network=host
    -
      name: Build Test Subject
      uses: docker/bake-action@v6
      if: steps.tests-exist.outputs.files_exists == 'true'
      with:
        builder: ${{ steps.buildx-setup.outputs.name }}
        workdir: ${{ inputs.working-directory }}
        targets: test
        pull: true
        push: false
        load: true
      env:
        GIT_TAG: ${{ steps.parameter-derivation.outputs.tag }}
        DOCKER_BUILD_SUMMARY: false
    -
      name: Set Up Test Environment 
      if: steps.tests-exist.outputs.files_exists == 'true'
      run: |
        pip3 install pytest pytest-emoji pytest-md
        pip3 install -r ${{ inputs.working-directory }}/tests/requirements.txt
    -
      name: Test
      uses: pavelzw/pytest-action@v2
      if: steps.tests-exist.outputs.files_exists == 'true'
    -
      name: Login to Docker Registry
      uses: docker/login-action@v3
      if: steps.parameter-derivation.outputs.push == 'true'
      with:
        registry: ${{ inputs.registry-host }}
        username: ${{ secrets.registry-user }}
        password: ${{ secrets.registry-password }}
    -
      name: Build and Push
      uses: docker/bake-action@v6
      with:
        builder: ${{ steps.buildx-setup.outputs.name }}
        workdir: ${{ inputs.working-directory }}
        pull: true
        push: ${{ steps.parameter-derivation.outputs.push }}
      env:
        GIT_TAG: ${{ steps.parameter-derivation.outputs.tag }}
